// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  email     String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}
model Vendor {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  firstName String
  lastName  String
  email     String   @unique
  address   String
  city      String
  distric   String?
  province  String?
  country   String?
  contactNo String
  image     String?
  createdAt DateTime @default(now())

  // Relations (one-to-many)
  services Service[]
}

model customer {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  firstName String
  lastName  String
  email     String   @unique
  address   String?
  city      String?
  distric   String?
  province  String?
  country   String?
  contactNo String?
  image     String?
  createdAt DateTime @default(now())
}

model Otp {
  id        String   @id @default(cuid())
  recipient String
  otp       String
  type      String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Service {
  id          Int     @id @default(autoincrement())
  serviceId   String  @unique
  serviceName String
  category    String
  description String?
  capacity    String?

  // Location
  latitude  Float?
  longitude Float?
  country   String?
  state     String?
  district  String?
  city      String?
  address   String?

  // Relations
  vendorId String
  vendor   Vendor           @relation(fields: [vendorId], references: [userId])
  packages ServicePackage[]
  photos   ServicePhoto[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServicePackage {
  id          Int     @id @default(autoincrement())
  packageName String?
  price       Float?
  features    String? // could be JSON if you want multiple features
  serviceId   String
  service     Service @relation(fields: [serviceId], references: [serviceId])
}

model ServicePhoto {
  id        Int     @id @default(autoincrement())
  imageUrl  String?
  serviceId String
  service   Service @relation(fields: [serviceId], references: [serviceId])
}

model WeddingEvent {
  id          String   @id @default(cuid())
  title       String
  GroomName   String?
  BrideName   String?
  date        DateTime?
  startTime   DateTime?
  endTime     DateTime?
  location    String?
  Description String?
  GuestCount  Int?
  createdBy   String
  createdAt   DateTime           @default(now())
  agenda      WeddingAgenda[]
  checklist   WeddingChecklist[]
  budget      Budget[]
  guests      RSVP[]
}

model WeddingAgenda {
  id           Int          @id @default(autoincrement())
  eventId      String
  title        String
  startTime    DateTime
  endTime      DateTime
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  WeddingEvent WeddingEvent @relation(fields: [eventId], references: [id])
}

model WeddingChecklist {
  id        Int      @id @default(autoincrement())
  eventId   String
  task      String
  status    String   @default("PENDING") // PENDING, DONE
  assignedTo String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  WeddingEvent WeddingEvent @relation(fields: [eventId], references: [id])
}

model Budget {
  id          Int      @id @default(autoincrement())
  eventId     String
  category    String   // Venue, Catering, Decoration
  allocated   Float
  spent       Float @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  WeddingEvent WeddingEvent @relation(fields: [eventId], references: [id])
}

model RSVP {
  id        Int      @id @default(autoincrement())
  eventId   String
  guestName String
  email     String?
  isInvited Boolean @default(false)
  responseStatus    String   @default("PENDING") // ACCEPTED, DECLINED, PENDING
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  WeddingEvent WeddingEvent @relation(fields: [eventId], references: [id])
}

enum RSVPStatus {
  PENDING
  ACCEPTED
  DECLINED
  WAITLISTED
}

